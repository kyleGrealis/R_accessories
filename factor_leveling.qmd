---
title: "your_title_goes_here"
author: "your_name_goes_here"
date: "`r Sys.Date()`"
format:
  html:
    self-contained: true
knitr:
  opts_chunk:      ########## set global options ############
    collapse: true # keep code from blocks together (if shown)
    echo: false    # don't show code
    message: true  # show messages
    warning: true  # show warnings
    error: true    # show error messages
    comment: ""    # don't show ## with printed output
    R.options:    
      digits: 3    # round to three digits
editor: visual
bibliography: [references.bib, packages.bib]
csl: the-new-england-journal-of-medicine.csl
---

```{r}
#| label: tidyverse
#| echo: false

library(conflicted)
conflict_prefer("filter", "dplyr", quiet = TRUE)
conflict_prefer("lag", "dplyr", quiet = TRUE)

suppressPackageStartupMessages(library(tidyverse))

# suppress "`summarise()` has grouped output by " messages
options(dplyr.summarise.inform = FALSE)

```

```{r}
#| label: load-data
#| message: false

library(tidyREDCap)
import_instruments(
  "https://redcap.miami.edu/api/",
  Sys.getenv("allison_death_data")
)
```

# Introduction

# Methods

Analyses were conducted with `r stringr::word(R.Version()$version.string, 1, 3)` with the `tidyverse` (`r packageVersion("tidyverse")`), `rUM` (`r packageVersion("rUM")`), `tidyREDCap` (`r packageVersion("tidyREDCap")`), and `tidymodels` (`r packageVersion("tidymodels")`) packages used to preprocess and summarize data.[@R-base; @R-tidyverse; @tidyverse2019; @R-rUM; @R-tidyREDCap; @R-tidymodels]


```{r}
#| label: preprocess

analysis <- example |> 
    # set the reference/baseline/not-event "Life Sentence" to be the first level
    mutate(
        death = as.factor(death),
        death = fct_relevel(death, "Life Sentence") 
    ) |> 
    # set the "No" level of the predictors to be first
    mutate(
        blackd = as.factor(blackd),
        blackd = fct_relevel(blackd, "otherwise") 
    ) |> 
    mutate(
        whitevic = as.factor(whitevic),
        whitevic = fct_relevel(whitevic, "otherwise") 
    ) |> 
    select(death, blackd, whitevic, serious)
```


```{r}
#| label: modeling

suppressPackageStartupMessages(library(tidymodels))

the_rec <- recipe(death ~ ., analysis) |> 
    # set the reference level to be otherwise
    step_relevel(blackd, ref_level = "otherwise") |> 
    step_relevel(whitevic, ref_level = "otherwise")

cooked <- bake(prep(the_rec), new_data=NULL)

the_model <- logistic_reg()

the_workflow <- workflow() |> 
    add_recipe(the_rec) |> 
    add_model(the_model)

the_fit <- 
    the_workflow |> 
    fit(data = analysis)

extract_fit_parsnip(the_fit) |> 
    tidy(exponentiate=T)

glance(the_fit)

predictions_prob <- bind_cols(
    death = analysis$death, 
    predict(the_fit, new_data = analysis, type = "prob"))

predictions_prob |> 
    roc_curve(death , .pred_Death, event_level = "second") |> 
    autoplot()

predictions_prob |> 
    roc_auc(death , .pred_Death, event_level = "second")

predictions_class <- bind_cols(
    death = analysis$death, 
    predict(the_fit, new_data = analysis, type = "class"))

sens(predictions_class, truth = death,
    estimate = .pred_class, event_level = "second")

conf_mat(predictions_class, truth = death,
         estimate = .pred_class)

```


# Results

# Conclusion

# References {.unnumbered}

```{r}
#| include: false

# automatically create a bib database for loaded R packages & rUM
knitr::write_bib(
  c(
    .packages(),
    "rUM",
    "table1"
  ),
  "packages.bib"
)
```
